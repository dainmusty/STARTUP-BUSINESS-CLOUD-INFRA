# name: Startup Infra CI/CD

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#   workflow_dispatch:
#     inputs:
#       action:
#         description: "Terraform action to perform"
#         required: true
#         default: "plan"
#         type: choice
#         options:
#           - plan
#           - apply
#           - destroy

# env:
#   AWS_REGION: us-east-1
#   SONAR_PROJECT_KEY: dainmusty_STARTUP-BUSINESS-TERRAFORM-INFRA
#   SONAR_ORGANIZATION: effulgencetech

# jobs:
#   security-scan:
#     name: Run Security Scans (Sonar + OWASP)
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push'

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: OWASP Dependency-Check
#         uses: dependency-check/Dependency-Check_Action@main
#         id: Depcheck
#         with:
#           project: 'effulgencetech'
#           path: '.'
#           format: 'HTML'
#           out: 'reports'
#           args: >
#             --failOnCVSS 7
#             --enableRetired

#       - name: Upload OWASP Dependency-Check Report
#         uses: actions/upload-artifact@v4
#         with:
#           name: OWASP Depcheck Report
#           path: reports

#       - name: Install SonarCloud Scanner
#         run: |
#           curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
#           unzip -q sonar-scanner.zip
#           echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

#       - name: SonarCloud Scan
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         run: |
#           sonar-scanner \
#             -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
#             -Dsonar.organization=${SONAR_ORGANIZATION} \
#             -Dsonar.branch.name=${GITHUB_REF_NAME} \
#             -Dsonar.sources=. \
#             -Dsonar.host.url=https://sonarcloud.io \
#             -Dsonar.login=$SONAR_TOKEN

#   terraform:
#     name: Terraform Workflow
#     runs-on: ubuntu-latest
#     needs: [security-scan]
#     if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.6.6

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Terraform Init
#         working-directory: root-modules/env/dev
#         run: terraform init -input=false

#       - name: Terraform Plan
#         if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
#         working-directory: root-modules/env/dev
#         run: terraform plan -out=tfplan

#       - name: Terraform Apply
#         if: github.event.inputs.action == 'apply'
#         working-directory: root-modules/env/dev
#         run: terraform apply --auto-approve tfplan

#       - name: Terraform Destroy
#         if: github.event.inputs.action == 'destroy'
#         working-directory: root-modules/env/dev
#         run: terraform destroy --auto-approve
